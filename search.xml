<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[golang中的error处理]]></title>
    <url>%2F2019%2F05%2F02%2Fgolang%E4%B8%AD%E7%9A%84error%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[error接口error类型本身就是一个预定义好的接口， 可以自定义error结构体，只需要实现error接口。 123type error interface &#123; Error() string&#125; errors包 12345678910111213141516// Package errors implements functions to manipulate errors.package errors// New returns an error that formats as the given text.func New(text string) error &#123; return &amp;errorString&#123;text&#125;&#125;// errorString is a trivial implementation of error.type errorString struct &#123; s string&#125;func (e *errorString) Error() string &#123; return e.s&#125; 自定义error123456789101112131415161718192021type Error struct &#123; Id string `json:"id"` Code int32 `json:"code"` Detail string `json:"detail"` Status string `json:"status"`&#125;func (e *Error) Error() string &#123; b, _ := json.Marshal(e) return string(b)&#125;// New generates a custom error.func New(id, detail string, code int32) error &#123; return &amp;Error&#123; Id: id, Code: code, Detail: detail, Status: http.StatusText(int(code)), &#125;&#125; error附加信息虽然Go语言对错误的设计非常简洁，但是对于我们开发者来说，很明显是不足的，比如我们需要知道出错的更多信息，在什么文件的，哪一行代码？进一步知道调用的堆栈，只有这样我们才更容易的定位问题。 如果要解决以上的问题，那么首先我们必须再继续扩充我们的errorString，再增加一些字段来存储更多的信息。比如我们要记录堆栈信息。github.com/pkg/errors这个库提供了对应的解决方案。 12345678910111213141516171819202122232425262728293031323334353637type stack []uintptrtype errorString struct &#123; s string *stack&#125;func callers() *stack &#123; const depth = 32 var pcs [depth]uintptr n := runtime.Callers(3, pcs[:]) var st stack = pcs[0:n] return &amp;st&#125;func New(text string) error &#123; return &amp;errorString&#123; s: text, stack: callers(), &#125;&#125;// WithStack annotates err with a stack trace at the point WithStack was called.// If err is nil, WithStack returns nil.func WithStack(err error) error &#123; if err == nil &#123; return nil &#125; return &amp;withStack&#123; err, callers(), &#125;&#125;type withStack struct &#123; error *stack&#125; github.com/pkg/errors提供了几个函数可以选择：12345678//只附加新的信息func WithMessage(err error, message string) error//只附加调用堆栈信息func WithStack(err error) error//同时附加堆栈和信息func Wrap(err error, message string) error]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[systemtap分析nginx一次http请求函数调用过程]]></title>
    <url>%2F2018%2F01%2F01%2Fsystemtap%E5%88%86%E6%9E%90nginx%E4%B8%80%E6%AC%A1http%E8%AF%B7%E6%B1%82%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[systemtap 工作原理systemtap 的核心思想是定义一个事件（event），以及给出处理该事件的句柄（Handler）。当一个特定的事件发生时，内核运行该处理句柄，就像快速调用一个子函数一样，处理完之后恢复到内核原始状态。这里有两个概念： 事件（Event）：systemtap 定义了很多种事件，例如进入或退出某个内核函数、定时器时间到、整个systemtap会话启动或退出等等。 句柄（Handler）：就是一些脚本语句，描述了当事件发生时要完成的工作，通常是从事件的上下文提取数据，将它们存入内部变量中，或者打印出来。 Systemtap 工作原理是通过将脚本语句翻译成C语句，编译成内核模块。模块加载之后，将所有探测的事件以钩子的方式挂到内核上，当任何处理器上的某个事件发生时，相应钩子上句柄就会被执行。最后，当systemtap会话结束之后，钩子从内核上取下，移除模块。整个过程用一个命令 stap 就可以完成。 上面只是简单的原理，更多背后的机理参考网上资料和相应的论文。 分析nginx http请求处理脚本参见[知乎][1]12345678// show_one_req.stapprobe process("/usr/local/openresty/nginx/sbin/nginx").function("ngx_http_*") &#123; printf("%s -&gt; %s\n", thread_indent(2), probefunc());&#125;probe process("/usr/local/openresty/nginx/sbin/nginx").function("ngx_http_*").return &#123; printf("%s &lt;- %s\n", thread_indent(-2), probefunc());&#125; 1stap show_one_req.stap -x NGX_WORKER_PID -v 代码调用过程(比较长)```bash 0 openresty(1551): -&gt; ngx_http_init_connection 24 openresty(1551): &lt;- ngx_event_accept 0 openresty(1551): -&gt; ngx_http_wait_request_handler 10 openresty(1551): -&gt; ngx_http_create_request 16 openresty(1551): &lt;- ngx_http_wait_request_handler 18 openresty(1551): -&gt; ngx_http_process_request_line 23 openresty(1551): -&gt; ngx_http_read_request_header 27 openresty(1551): &lt;- ngx_http_process_request_line 30 openresty(1551): -&gt; ngx_http_parse_request_line 36 openresty(1551): &lt;- ngx_http_process_request_line 38 openresty(1551): -&gt; ngx_http_process_request_uri 42 openresty(1551): &lt;- ngx_http_process_request_line 45 openresty(1551): -&gt; ngx_http_process_request_headers 50 openresty(1551): -&gt; ngx_http_read_request_header 54 openresty(1551): &lt;- ngx_http_process_request_headers 57 openresty(1551): -&gt; ngx_http_parse_header_line 62 openresty(1551): &lt;- ngx_http_process_request_headers 65 openresty(1551): -&gt; ngx_http_process_user_agent 70 openresty(1551): &lt;- ngx_http_process_request_headers 72 openresty(1551): -&gt; ngx_http_parse_header_line 76 openresty(1551): &lt;- ngx_http_process_request_headers 78 openresty(1551): -&gt; ngx_http_process_host 83 openresty(1551): -&gt; ngx_http_validate_host 88 openresty(1551): &lt;- ngx_http_process_host 90 openresty(1551): -&gt; ngx_http_set_virtual_server 94 openresty(1551): -&gt; ngx_http_find_virtual_server.isra.2 98 openresty(1551): &lt;- ngx_http_set_virtual_server 99 openresty(1551): &lt;- ngx_http_process_host 101 openresty(1551): &lt;- ngx_http_process_request_headers 103 openresty(1551): -&gt; ngx_http_parse_header_line 107 openresty(1551): &lt;- ngx_http_process_request_headers 109 openresty(1551): -&gt; ngx_http_parse_header_line 113 openresty(1551): &lt;- ngx_http_process_request_headers 115 openresty(1551): -&gt; ngx_http_process_request_header 119 openresty(1551): &lt;- ngx_http_process_request_headers 121 openresty(1551): -&gt; ngx_http_process_request 126 openresty(1551): -&gt; ngx_http_handler 131 openresty(1551): -&gt; ngx_http_core_run_phases 136 openresty(1551): -&gt; ngx_http_core_generic_phase 164 openresty(1551): -&gt; ngx_http_realip_handler 169 openresty(1551): &lt;- ngx_http_core_generic_phase 170 openresty(1551): &lt;- ngx_http_core_run_phases 173 openresty(1551): -&gt; ngx_http_core_rewrite_phase 178 openresty(1551): &lt;- ngx_http_core_run_phases 180 openresty(1551): -&gt; ngx_http_core_rewrite_phase 185 openresty(1551): -&gt; ngx_http_rewrite_handler 189 openresty(1551): &lt;- ngx_http_core_rewrite_phase 191 openresty(1551): &lt;- ngx_http_core_run_phases 193 openresty(1551): -&gt; ngx_http_core_find_config_phase 198 openresty(1551): -&gt; ngx_http_core_find_location 202 openresty(1551): -&gt; ngx_http_core_find_location 207 openresty(1551): -&gt; ngx_http_core_find_location 211 openresty(1551): -&gt; ngx_http_core_find_location 215 openresty(1551): &lt;- ngx_http_core_find_location 217 openresty(1551): &lt;- ngx_http_core_find_config_phase 219 openresty(1551): -&gt; ngx_http_update_location_config 224 openresty(1551): &lt;- ngx_http_core_find_config_phase 226 openresty(1551): &lt;- ngx_http_core_run_phases 228 openresty(1551): -&gt; ngx_http_core_rewrite_phase 232 openresty(1551): &lt;- ngx_http_core_run_phases 234 openresty(1551): -&gt; ngx_http_core_rewrite_phase 238 openresty(1551): -&gt; ngx_http_rewrite_handler 242 openresty(1551): &lt;- ngx_http_core_rewrite_phase 244 openresty(1551): &lt;- ngx_http_core_run_phases 246 openresty(1551): -&gt; ngx_http_core_post_rewrite_phase 250 openresty(1551): &lt;- ngx_http_core_run_phases 253 openresty(1551): -&gt; ngx_http_core_generic_phase 257 openresty(1551): -&gt; ngx_http_realip_handler 261 openresty(1551): &lt;- ngx_http_core_generic_phase 263 openresty(1551): &lt;- ngx_http_core_run_phases 265 openresty(1551): -&gt; ngx_http_core_generic_phase 270 openresty(1551): -&gt; ngx_http_limit_req_handler 276 openresty(1551): &lt;- ngx_http_core_generic_phase 277 openresty(1551): &lt;- ngx_http_core_run_phases 279 openresty(1551): -&gt; ngx_http_core_generic_phase 284 openresty(1551): -&gt; ngx_http_limit_conn_handler 288 openresty(1551): &lt;- ngx_http_core_generic_phase 290 openresty(1551): &lt;- ngx_http_core_run_phases 292 openresty(1551): -&gt; ngx_http_core_access_phase 296 openresty(1551): -&gt; ngx_http_access_handler 301 openresty(1551): &lt;- ngx_http_core_access_phase 303 openresty(1551): &lt;- ngx_http_core_run_phases 305 openresty(1551): -&gt; ngx_http_core_access_phase 310 openresty(1551): -&gt; ngx_http_auth_basic_handler 314 openresty(1551): &lt;- ngx_http_core_access_phase 316 openresty(1551): &lt;- ngx_http_core_run_phases 318 openresty(1551): -&gt; ngx_http_core_post_access_phase 322 openresty(1551): &lt;- ngx_http_core_run_phases 324 openresty(1551): -&gt; ngx_http_core_generic_phase 328 openresty(1551): -&gt; ngx_http_try_files_handler 333 openresty(1551): &lt;- ngx_http_core_generic_phase 335 openresty(1551): &lt;- ngx_http_core_run_phases 337 openresty(1551): -&gt; ngx_http_core_generic_phase 341 openresty(1551): -&gt; ngx_http_mirror_handler 346 openresty(1551): &lt;- ngx_http_core_generic_phase 347 openresty(1551): &lt;- ngx_http_core_run_phases 349 openresty(1551): -&gt; ngx_http_core_content_phase 355 openresty(1551): -&gt; ngx_http_lua_content_handler 362 openresty(1551): -&gt; ngx_http_lua_content_handler 366 openresty(1551): -&gt; ngx_http_lua_content_handler 376 openresty(1551): -&gt; ngx_http_lua_content_handler_inline 391 openresty(1551): -&gt; ngx_http_lua_content_handler_inline 424 openresty(1551): -&gt; ngx_http_lua_cache_loadbuffer 488 openresty(1551): -&gt; ngx_http_lua_cache_load_code 506 openresty(1551): &lt;- ngx_http_lua_cache_loadbuffer 509 openresty(1551): &lt;- ngx_http_lua_content_handler_inline 512 openresty(1551): -&gt; ngx_http_lua_content_by_chunk 517 openresty(1551): -&gt; ngx_http_lua_reset_ctx 523 openresty(1551): -&gt; ngx_http_lua_finalize_threads.isra.2 529 openresty(1551): &lt;- ngx_http_lua_reset_ctx 531 openresty(1551): &lt;- ngx_http_lua_content_by_chunk 534 openresty(1551): -&gt; ngx_http_lua_new_thread 541 openresty(1551): -&gt; ngx_http_lua_create_new_globals_table 547 openresty(1551): &lt;- ngx_http_lua_new_thread 549 openresty(1551): -&gt; ngx_http_lua_new_thread 554 openresty(1551): -&gt; ngx_http_lua_new_thread 562 openresty(1551): &lt;- ngx_http_lua_content_by_chunk 564 openresty(1551): -&gt; ngx_http_lua_content_by_chunk 568 openresty(1551): -&gt; ngx_http_lua_content_by_chunk 577 openresty(1551): -&gt; ngx_http_cleanup_add 582 openresty(1551): &lt;- ngx_http_lua_content_by_chunk 586 openresty(1551): -&gt; ngx_http_lua_run_thread 592 openresty(1551): -&gt; ngx_http_lua_run_thread 598 openresty(1551): -&gt; ngx_http_lua_pcre_malloc_init 602 openresty(1551): &lt;- ngx_http_lua_run_thread 612 openresty(1551): -&gt; ngx_http_lua_ngx_say 619 openresty(1551): -&gt; ngx_http_lua_ngx_echo 624 openresty(1551): -&gt; ngx_http_lua_ngx_echo 631 openresty(1551): -&gt; ngx_http_lua_chain_get_free_buf 637 openresty(1551): &lt;- ngx_http_lua_ngx_echo 643 openresty(1551): -&gt; ngx_http_lua_send_chain_link 648 openresty(1551): -&gt; ngx_http_lua_send_header_if_needed 653 openresty(1551): -&gt; ngx_http_lua_send_header_if_needed 658 openresty(1551): -&gt; ngx_http_set_content_type 663 openresty(1551): &lt;- ngx_http_lua_send_header_if_needed 665 openresty(1551): -&gt; ngx_http_send_header 671 openresty(1551): -&gt; ngx_http_not_modified_header_filter 677 openresty(1551): -&gt; ngx_http_lua_capture_header_filter 683 openresty(1551): -&gt; ngx_http_headers_filter 689 openresty(1551): -&gt; ngx_http_userid_filter 697 openresty(1551): -&gt; ngx_http_charset_header_filter 702 openresty(1551): -&gt; ngx_http_charset_header_filter 708 openresty(1551): -&gt; ngx_http_ssi_header_filter 714 openresty(1551): -&gt; ngx_http_gzip_header_filter 720 openresty(1551): -&gt; ngx_http_range_header_filter 725 openresty(1551): -&gt; ngx_http_chunked_header_filter 731 openresty(1551): -&gt; ngx_http_header_filter 741 openresty(1551): -&gt; ngx_http_write_filter 746 openresty(1551): &lt;- ngx_http_header_filter 748 openresty(1551): &lt;- ngx_http_charset_header_filter 750 openresty(1551): &lt;- ngx_http_charset_header_filter 752 openresty(1551): &lt;- ngx_http_charset_header_filter 754 openresty(1551): &lt;- ngx_http_charset_header_filter 757 openresty(1551): &lt;- ngx_http_charset_header_filter 759 openresty(1551): &lt;- ngx_http_userid_filter 762 openresty(1551): &lt;- ngx_http_headers_filter 764 openresty(1551): &lt;- ngx_http_lua_send_header_if_needed 766 openresty(1551): &lt;- ngx_http_lua_send_header_if_needed 769 openresty(1551): &lt;- ngx_http_lua_send_header_if_needed 771 openresty(1551): &lt;- ngx_http_lua_send_header_if_needed 773 openresty(1551): &lt;- ngx_http_lua_send_chain_link 780 openresty(1551): -&gt; ngx_http_lua_output_filter 787 openresty(1551): -&gt; ngx_http_output_filter 794 openresty(1551): -&gt; ngx_http_range_body_filter 801 openresty(1551): -&gt; ngx_http_copy_filter 807 openresty(1551): -&gt; ngx_http_lua_capture_body_filter 816 openresty(1551): -&gt; ngx_http_trailers_filter 824 openresty(1551): -&gt; ngx_http_charset_body_filter 832 openresty(1551): -&gt; ngx_http_ssi_body_filter 841 openresty(1551): -&gt; ngx_http_postpone_filter 850 openresty(1551): -&gt; ngx_http_gzip_body_filter 856 openresty(1551): -&gt; ngx_http_chunked_body_filter 867 openresty(1551): -&gt; ngx_http_write_filter 873 openresty(1551): &lt;- ngx_http_chunked_body_filter 876 openresty(1551): &lt;- ngx_http_gzip_body_filter 878 openresty(1551): &lt;- ngx_http_ssi_body_filter 880 openresty(1551): &lt;- ngx_http_ssi_body_filter 883 openresty(1551): &lt;- ngx_http_charset_body_filter 885 openresty(1551): &lt;- ngx_http_trailers_filter 887 openresty(1551): &lt;- ngx_http_lua_capture_body_filter 890 openresty(1551): &lt;- ngx_output_chain 894 openresty(1551): &lt;- ngx_http_output_filter2142 openresty(1551): &lt;- ngx_http_output_filter2189 openresty(1551): &lt;- ngx_http_lua_output_filter2203 openresty(1551): &lt;- ngx_http_lua_ngx_echo2207 openresty(1551): &lt;- ngx_http_lua_ngx_echo2219 openresty(1551): &lt;- 0x7f93c6d1f6ea2222 openresty(1551): &lt;- 0x7f93c6d1f6ea2232 openresty(1551): -&gt; ngx_http_lua_pcre_malloc_done2312 openresty(1551): &lt;- ngx_http_lua_run_thread2325 openresty(1551): -&gt; ngx_http_lua_run_thread2334 openresty(1551): -&gt; ngx_http_lua_run_thread2339 openresty(1551): -&gt; ngx_http_lua_del_thread.part.92354 openresty(1551): &lt;- ngx_http_lua_run_thread2359 openresty(1551): -&gt; ngx_http_lua_send_chain_link2365 openresty(1551): -&gt; ngx_http_lua_send_header_if_needed2369 openresty(1551): &lt;- ngx_http_lua_send_chain_link2376 openresty(1551): -&gt; ngx_http_discard_request_body2383 openresty(1551): -&gt; ngx_http_test_expect2387 openresty(1551): &lt;- ngx_http_discard_request_body2389 openresty(1551): &lt;- ngx_http_lua_send_chain_link2392 openresty(1551): -&gt; ngx_http_lua_send_chain_link2399 openresty(1551): -&gt; ngx_http_send_special2466 openresty(1551): -&gt; ngx_http_output_filter2478 openresty(1551): -&gt; ngx_http_range_body_filter2487 openresty(1551): -&gt; ngx_http_copy_filter2495 openresty(1551): -&gt; ngx_http_lua_capture_body_filter2502 openresty(1551): -&gt; ngx_http_trailers_filter2508 openresty(1551): -&gt; ngx_http_charset_body_filter2515 openresty(1551): -&gt; ngx_http_ssi_body_filter2522 openresty(1551): -&gt; ngx_http_postpone_filter2527 openresty(1551): -&gt; ngx_http_gzip_body_filter2533 openresty(1551): -&gt; ngx_http_chunked_body_filter2539 openresty(1551): -&gt; ngx_http_chunked_body_filter2544 openresty(1551): -&gt; ngx_http_write_filter2722 openresty(1551): &lt;- ngx_http_chunked_body_filter2727 openresty(1551): &lt;- ngx_http_gzip_body_filter2731 openresty(1551): &lt;- ngx_http_ssi_body_filter2732 openresty(1551): &lt;- ngx_http_ssi_body_filter2737 openresty(1551): &lt;- ngx_http_charset_body_filter2740 openresty(1551): &lt;- ngx_http_trailers_filter2743 openresty(1551): &lt;- ngx_http_lua_capture_body_filter2746 openresty(1551): &lt;- ngx_output_chain2753 openresty(1551): &lt;- ngx_http_output_filter2755 openresty(1551): &lt;- ngx_http_output_filter2757 openresty(1551): &lt;- ngx_http_send_special2761 openresty(1551): &lt;- ngx_http_lua_send_chain_link2765 openresty(1551): &lt;- ngx_http_lua_run_thread2770 openresty(1551): &lt;- ngx_http_lua_content_by_chunk2776 openresty(1551): &lt;- ngx_http_lua_content_handler2778 openresty(1551): &lt;- ngx_http_lua_content_handler2782 openresty(1551): &lt;- ngx_http_core_content_phase2786 openresty(1551): -&gt; ngx_http_finalize_request2796 openresty(1551): -&gt; ngx_http_post_action2803 openresty(1551): &lt;- ngx_http_finalize_request2806 openresty(1551): -&gt; ngx_http_finalize_connection2811 openresty(1551): -&gt; ngx_http_finalize_connection2817 openresty(1551): -&gt; ngx_http_free_request2823 openresty(1551): -&gt; ngx_http_lua_request_cleanup_handler2829 openresty(1551): -&gt; ngx_http_lua_request_cleanup2836 openresty(1551): -&gt; ngx_http_lua_request_cleanup2842 openresty(1551): -&gt; ngx_http_lua_finalize_threads.isra.22848 openresty(1551): &lt;- ngx_http_free_request2850 openresty(1551): &lt;- ngx_http_free_request2852 openresty(1551): &lt;- ngx_http_free_request2855 openresty(1551): -&gt; ngx_http_log_request2864 openresty(1551): -&gt; ngx_http_log_handler2874 openresty(1551): -&gt; ngx_http_script_flush_no_cacheable_variables2879 openresty(1551): &lt;- ngx_http_log_handler2882 openresty(1551): -&gt; ngx_http_log_variable_getlen2915 openresty(1551): -&gt; ngx_http_get_indexed_variable2953 openresty(1551): -&gt; ngx_http_variable_remote_addr2960 openresty(1551): &lt;- ngx_http_get_indexed_variable2962 openresty(1551): &lt;- ngx_http_log_variable_getlen2965 openresty(1551): -&gt; ngx_http_log_escape.isra.12969 openresty(1551): &lt;- ngx_http_log_variable_getlen2971 openresty(1551): &lt;- ngx_http_log_handler2973 openresty(1551): -&gt; ngx_http_log_variable_getlen2977 openresty(1551): -&gt; ngx_http_get_indexed_variable2982 openresty(1551): -&gt; ngx_http_variable_remote_user2988 openresty(1551): -&gt; ngx_http_auth_basic_user2994 openresty(1551): &lt;- ngx_http_variable_remote_user2996 openresty(1551): &lt;- ngx_http_get_indexed_variable2997 openresty(1551): &lt;- ngx_http_log_variable_getlen2999 openresty(1551): &lt;- ngx_http_log_handler3001 openresty(1551): -&gt; ngx_http_log_variable_getlen3005 openresty(1551): -&gt; ngx_http_get_indexed_variable3010 openresty(1551): -&gt; ngx_http_variable_request_line3016 openresty(1551): &lt;- ngx_http_get_indexed_variable3018 openresty(1551): &lt;- ngx_http_log_variable_getlen3019 openresty(1551): -&gt; ngx_http_log_escape.isra.13024 openresty(1551): &lt;- ngx_http_log_variable_getlen3026 openresty(1551): &lt;- ngx_http_log_handler3027 openresty(1551): -&gt; ngx_http_log_variable_getlen3031 openresty(1551): -&gt; ngx_http_get_indexed_variable3036 openresty(1551): -&gt; ngx_http_variable_header3040 openresty(1551): &lt;- ngx_http_get_indexed_variable3042 openresty(1551): &lt;- ngx_http_log_variable_getlen3043 openresty(1551): &lt;- ngx_http_log_handler3045 openresty(1551): -&gt; ngx_http_log_variable_getlen3049 openresty(1551): -&gt; ngx_http_get_indexed_variable3054 openresty(1551): -&gt; ngx_http_variable_header3058 openresty(1551): &lt;- ngx_http_get_indexed_variable3059 openresty(1551): &lt;- ngx_http_log_variable_getlen3062 openresty(1551): -&gt; ngx_http_log_escape.isra.13066 openresty(1551): &lt;- ngx_http_log_variable_getlen3067 openresty(1551): &lt;- ngx_http_log_handler3070 openresty(1551): -&gt; ngx_http_log_variable3074 openresty(1551): -&gt; ngx_http_get_indexed_variable3078 openresty(1551): &lt;- ngx_http_log_variable3081 openresty(1551): &lt;- ngx_http_log_handler3084 openresty(1551): -&gt; ngx_http_log_copy_short3088 openresty(1551): &lt;- ngx_http_log_handler3090 openresty(1551): -&gt; ngx_http_log_variable3094 openresty(1551): -&gt; ngx_http_get_indexed_variable3098 openresty(1551): &lt;- ngx_http_log_variable3100 openresty(1551): &lt;- ngx_http_log_handler3102 openresty(1551): -&gt; ngx_http_log_copy_short3106 openresty(1551): &lt;- ngx_http_log_handler3108 openresty(1551): -&gt; ngx_http_log_time3113 openresty(1551): &lt;- ngx_http_log_handler3114 openresty(1551): -&gt; ngx_http_log_copy_short3118 openresty(1551): &lt;- ngx_http_log_handler3120 openresty(1551): -&gt; ngx_http_log_variable3124 openresty(1551): -&gt; ngx_http_get_indexed_variable3128 openresty(1551): &lt;- ngx_http_log_variable3130 openresty(1551): &lt;- ngx_http_log_handler3132 openresty(1551): -&gt; ngx_http_log_copy_short3136 openresty(1551): &lt;- ngx_http_log_handler3137 openresty(1551): -&gt; ngx_http_log_status3143 openresty(1551): &lt;- ngx_http_log_handler3145 openresty(1551): -&gt; ngx_http_log_copy_short3149 openresty(1551): &lt;- ngx_http_log_handler3151 openresty(1551): -&gt; ngx_http_log_body_bytes_sent3155 openresty(1551): &lt;- ngx_http_log_handler3157 openresty(1551): -&gt; ngx_http_log_copy_short3161 openresty(1551): &lt;- ngx_http_log_handler3163 openresty(1551): -&gt; ngx_http_log_variable3167 openresty(1551): -&gt; ngx_http_get_indexed_variable3171 openresty(1551): &lt;- ngx_http_log_variable3173 openresty(1551): &lt;- ngx_http_log_handler3174 openresty(1551): -&gt; ngx_http_log_copy_short3178 openresty(1551): &lt;- ngx_http_log_handler3180 openresty(1551): -&gt; ngx_http_log_variable3184 openresty(1551): -&gt; ngx_http_get_indexed_variable3189 openresty(1551): &lt;- ngx_http_log_variable3190 openresty(1551): &lt;- ngx_http_log_handler3192 openresty(1551): -&gt; ngx_http_log_copy_short3196 openresty(1551): &lt;- ngx_http_log_handler3198 openresty(1551): -&gt; ngx_http_log_write3238 openresty(1551): &lt;- ngx_http_log_handler3241 openresty(1551): &lt;- ngx_http_log_request3243 openresty(1551): &lt;- ngx_http_free_request3249 openresty(1551): &lt;- ngx_http_finalize_connection3255 openresty(1551): &lt;- ngx_http_core_content_phase3256 openresty(1551): &lt;- ngx_http_core_content_phase3259 openresty(1551): &lt;- ngx_http_core_run_phases3263 openresty(1551): &lt;- ngx_http_process_request3264 openresty(1551): &lt;- ngx_http_process_request3267 openresty(1551): -&gt; ngx_http_run_posted_requests3272 openresty(1551): &lt;- ngx_http_process_request_line3274 openresty(1551): &lt;- ngx_http_process_request_line3276 openresty(1551): &lt;- ngx_http_process_request_line3278 openresty(1551): &lt;- ngx_epoll_process_events3280 openresty(1551): &lt;- ngx_epoll_process_events4536 openresty(1551): -&gt; ngx_http_keepalive_handler4557 openresty(1551): -&gt; ngx_http_close_connection4648 openresty(1551): &lt;- ngx_epoll_process_events4651 openresty(1551): &lt;- ngx_epoll_process_events]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx 源码 systemtap stap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql索引总结]]></title>
    <url>%2F2017%2F11%2F02%2Fmysql%E7%B4%A2%E5%BC%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[InnoDB为啥用B+树做索引结构 Hash索引Hash只能做精确的等值查询，不能做部分匹配，不能做范围查询，不能排序 有序数组数组对于增删操作需要移动后面的数据 平衡二叉查找树数据量大时，树的高度相对会大，中序遍历可以得到一个有序序列，但是不足以按照区间快速查找数据 B树不能支持范围查询，排序 B+树叶子节点是一个有序链表 跳跃表类似与B+树，也是可以的 InnoDB数据存储方式MySQL的数据是存储在聚簇索引上的，MySQL的每个表会按照主键建立一个聚簇索引，每行数据挂在B+树的叶子节点上，非聚簇索引的叶子节点除了索引字段的值，还会存储主键的值。如果使用了非聚簇索引，而且还需要查找索引字段之外的字段值，这时候就需要使用主键进行回表操作。 聚簇索引 InnoDB基于主键建立聚簇索引 没有主键，会用唯一索引建立 没有唯一索引，InnoDB会定义一个隐藏的主键，然后对其建立聚簇索引 InnoDB默认使用聚簇索引来组织数据，如果你用InnoDB，而且不需要特殊的聚簇索引，一个好的做法就是使用代理主键(surrogate key)——独立于你的应用中的数据。最简单的做法就是使用一个AUTO_INCREMENT的列，这会保证记录按照顺序插入，而且能提高使用primary key进行连接的查询的性能。应该尽量避免随机的聚簇主键，例如字符串主键就是一个不好的选择，它使得插入操作变得随机，不是按顺序插入，会产生页分裂、页合并等操作。 非聚簇索引(二级索引) InnoDB索引聚簇索引二级索引组合索引在多个列上建立的联合索引，对比单字段索引 覆盖索引select筛选的字段都在索引包含的字段中，不需要进行回表操作 最左前缀组合索引是按照字段从左到右排序来组织索引的，从中间字段开始比较不是按序的，无法使用到索引，必须第一字段开始，不能跳过中间字段使用后面的字段。如12345组合索引(a, b, c)可以用到的索引aa, ba, b, c 前缀索引可以在字符串字段上基于字符串前多少个字符建立前缀索引，这种索引的优势是减少索引空间 索引下推123表t有一个组合索引(a,b,c)select * from t where a=1 and b&gt;=100 and b&lt;=200 and c='X';这个查询会用到索引(a,b,c)的(a,b)，因为b是范围查询，就会走到页子节点，不会在使用索引节点加上查询，但是c在索引中，索引可以利用叶子节点中c的值来做过滤，这就是所谓的索引下推 唯一索引普通索引允许被索引的数据列包含重复的值。而唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一 唯一索引在查询的时候可以唯一确定一行，所以查到记录就会停止查询，而普通索引还有继续向后遍历到第一个不满足的条件为止 索引设计 尽量选择区分度高的列作为索引区分度的公式是 COUNT(DISTINCT col) / COUNT(*) NULL也是可以走索引的 使用组合索引代替多个列索引 注意重复/冗余的索引、不使用的索引 唯一索引业务无法保证数据的唯一的时候，可以使用唯一索引通过数据库保证数据的唯一 索引选择优化器基于代价进行索引选择，扫描行数（基于统计的）、是否使用临时表、是否排序等 索引选择异常处理 force index (hard code) 修改sql引导mysql选择正确的索引 删掉误导的索引，新建合适的索引 索引使用 like语句不要以通配符开头在以通配符%和_开头作查询时，MySQL不会使用索引 不要在列上进行运算表达式、函数 隐式类型转换、隐式字符编码转换、排序规则不一样 都不走索引 尽量不要使用NOT IN、&lt;&gt;、!= 操作引擎放弃使用索引而进行全表扫描，使用&gt;或&lt;会比较高效 in值太多时也是不走索引的，数据库有配置 or条件在or条件的每个字段上单独建立索引，也是可以走索引的，会走union合并 组合索引的使用要遵守“最左前缀”原则]]></content>
      <categories>
        <category>mysql 索引</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python垃圾回收]]></title>
    <url>%2F2017%2F10%2F27%2Fpython%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[python的垃圾回收机制主要是引用计算，同时辅助使用标记-清除解决循环应用，分代回收可以减少垃圾回收扫描的频率。 引用计数&ensp;&ensp;python默认的垃圾回收机制就是”引用计数”，每个对象维护一个引用计数，当新的引用指向该对象时，引用计数加1，当一个引用被销毁时减1，一旦引用计数为0，该对象立即被回收，所占用的内存将被释放。它的主要问题是不能解决”循环引用”问题。循环引用使得对象一直驻留在内存中，造成内存泄漏。为了解决循环引用问题，引入了标记清除和分代回收机制。 标记清除&ensp;&ensp;标记-清除是一种基于追踪回收技术实现的垃圾回收算法，对象之间通过引用连在一起，构成一个有向图，对象构成有向图的节点，引用关系是边。从根对象出发，沿着有向边遍历对象，可达的对象标记为有用的对象，不可达的对象是要清除的对象。所谓根对象就是一些全局引用对象和函数栈中的引用，这些引用所引用的对象是不可删除的。&ensp;&ensp;标记清除算法作为python的辅助垃圾收集机制主要处理的是容器，因为字符串和数值对象不可能造成循环引用。 分代回收&ensp;&ensp;分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。&ensp;&ensp;分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象。 垃圾回收时，python不能进行其它的任务。频繁的垃圾回收会大大降低python的效率。如果内存中的对象不多，就没有必要总启动垃圾回收。所以，python只会在特定的条件下，自动启动垃圾回收。当python运行时，会记录其中分配对象和取消分配对象的次数。当两者差值高于某个阈值，垃圾回收才会启动。垃圾回收时一定会扫描所有的0代对象，0代经过一定次数的垃圾回收，就会启动对0代和1代的扫描清理，当1代也经历一定次数的垃圾回收后， 就会启动对0代1代和2代所有对象的扫描。gc.get_threshold()返回(700, 10, 10)表示700即是垃圾回收启动的阈值，返回的两个10，每10次0代垃圾回收，会配合1次1代的垃圾回收；而每10次1代的垃圾回收，才会有1次的2代垃圾回收。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 垃圾回收</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql数据类型选择]]></title>
    <url>%2F2017%2F10%2F23%2Fmysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9%2F</url>
    <content type="text"><![CDATA[mysql数据类型很多，选择合适的数据类型对于提高性能大有裨益。概况来说，尽可能选择小而简单的合适的数据类型。 小而简单可以减小存储空间的消耗，IO的消耗，更利于缓存到内存，同时计算复杂度也会低。 尽量避免使用NULL有NULL的列值会使索引、索引统计和值比较更加复杂；NULL列会使用更多的存储空间，可为NULL列做索引时，每个索引需要一个额外的字节。 常用类型 整数类型TINYINT(8位)，SMALLINT(16位)，MEDIUMINT(24位)，INT(32位)，BIGINT(64位)，它们的范围是-2的(n-1)次方到2的(n-1)次方-1。如果选择了UNSIGNED表示非负，它可以使整数最大值提高一倍，有符号和无符号使用相同的存储空间，具有相同的性能。为整型指定宽度，如INT(11)，对于存储来说INT(1)和INT(20)是相同的，它不会限制值的合法范围，只是规定了MySQL与客户端的交互应该显示多少位而已，比如你向INT(1)中插入了123456值，数据库中其实已经存入了123456，只是对于客户端查出来是1而已。尽量选择合适范围的类型。 实数类型FLOAT(4字节)，DOUBLE(8字节)，DECIMAL。DECMIAL存储精确的小数，但是效率低，可以考虑用整数代替。 字符串类型VARCHAR用于存储变长字符串，会删除末尾空格，仅存储必要的空间，会比定长字符串节省空间。会用1或2个额外字节记录字符串的长度，每次UPDATE会重新计算字符串的长度，还有可能会导致页分裂(字符串变长，空间不够)。CHAR是定长的，每个列无论字符串长度大小都会分配固定存储空间，CHAR适合存储字符很短，或者所有值接近一个长度时。使用CHAR(1)和VARCHAR(1)来存储Y或N时，CHAR需要一个字符，而VARCHAR需要两个，因为还有一个长度字节。BLOB和TEXT类型是为存储大数据而设计的，可以做部分前缀索引。使用枚举代替字符串类型，枚举可以把一些重复的字符串存储成一个预定义的集合，MySQL在存储枚举时非常紧凑，MySQL在列中保存值为枚举中的位置整数。枚举最不好的是字符串是固定的，添加或删除必须使用ALTER TABLE。因此对于未来会改变的字符串，使用枚举不是一个好主意，除非能接受在枚举末尾添加元素，由于枚举有一个映射转换过程，所以枚举虽然能减少存储空间，但是也会增加一些额外开销。 时间和日期类型TIMESTAMP(4字节)比DATETIME(8字节)空间效率更高，TIMESTAMP时区相关，只能表示到2038年。 位数据类型一般在应用中尽量避免使用BIT，对于大部分应用来说最好是不用。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python性能优化之PyPy]]></title>
    <url>%2F2017%2F07%2F27%2FPython%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BPyPy%2F</url>
    <content type="text"><![CDATA[Python等动态语言是通过将程序编译成字节码，用虚拟机执行字节码来运行程序的，并不是直接执行的本地机器码，所以解释型动态语言一般会比编译型静态语言执行速度慢。python等动态类型语言之所以慢，就是因为每一个简单的操作都需要大量的指令才能完成。JIT（即时编译，一种混合了解释器和编译器好处的技术）在字节码执行过程中标识被经常执行的字节码，并将其编译成本地机器码，缓存该结果，当同样的字节码再次被执行的时候，会执行预编译的机器码，从而提高性能。PyPy就是为了提升python性能而设计的，其使用RPython实现的解释器。RPython是Python的子集， 具有静态类型。 PyPy源码安装以ubuntu操作系统为例，参加官方文档 依赖安装 1234$ sudo apt-get install gcc make libffi-dev pkg-config libz-dev libbz2-dev \libsqlite3-dev libncurses-dev libexpat1-dev libssl-dev libgdbm-dev \tk-dev libgc-dev python-cffi \liblzma-dev libncursesw-dev # these two only needed on PyPy3 源码下载https://pypy.org/download.html 编译确保有足够的内存，执行编译过程有点漫长。 1make 。。。编译成功后会生成一个可执行文件pypy-c和一个动态库libpypy-c.so。新建目录/opt/pypy，将源码目录下的如下文件复制到该目录下: pypy-c libpypy-c.so include/ lib_pypy/ lib-python/2.7 site-packages/ 将pypy-c放到PATH所在目录，将动态库放入搜索路径下:1234$ cd /usr/local/lib$ sudo ln -s /opt/pypy/libpypy-c.so libpypy-c.so$ cd /usr/local/bin$ sudo ln -s /opt/pypy/pypy-c pypy PyPy使用结合虚拟环境使用1$ mkvirtualenv -p /usr/local/bin/pypy venv-pypy 一个Flask框架写的项目flask-api，压测一个简单数据库查询请求，使用PyPy运行性能提升了一倍左右。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>性能优化</tag>
        <tag>PyPy</tag>
        <tag>JIT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python性能优化之火焰图]]></title>
    <url>%2F2017%2F07%2F26%2FPython%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E7%81%AB%E7%84%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[性能优化首先要知道程序的性能瓶颈在哪里，python已经提供了profile工具可以看出哪些函数耗时较长。本文介绍的火焰图会以图的形式给出程序更直观的函数调用及开销，这里将介绍的是Uber开源的python火焰图工具pyflame。 首先给出一个直观的火焰图可以很形象的看出函数调用耗时情况，横向越宽说明耗时越长，从下往上看，最下面表示程序从开始到结束总的耗时。从下往上是一级级函数的调用情况。 pyflame安装(以ubuntu为例)对Debian/Ubuntu/Fedora系统支持的比较好，centos6参考。 依赖安装1$ sudo apt-get install autoconf automake autotools-dev g++ pkg-config python-dev python3-dev libtool make 编译安装 123./autogen.sh./configure # Plus any options like --prefix.make 生成的pyflame工具位于src目录下，可以将其放到/usr/local/bin目录下 火焰图生成工具火焰图github, 主要使用脚本flamegraph.pl，可以将其放到/usr/local/bin目录下 pyflame使用1234$ pyflame 12345 # Attach to PID 12345 and profile it for 1 second$ pyflame -s 5 -r 0.01 768 # Attach to PID 768 and profile it for 5 seconds, sampling every 0.01 seconds$ pyflame -o prof.txt -t py.test tests/ # Run py.test against tests/, emitting sample data to prof.txt$ flamegraph.pl prof.txt&gt;prof.svg # 生成图 -s 指定pyflame运行时间 -r 抽样频率 -o 抽样数据输出 –abi option to force a particular Python ABI.(uwsgi可能会用到这个选项)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>性能优化</tag>
        <tag>火焰图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取Let's Encrypt永久免费证书]]></title>
    <url>%2F2017%2F07%2F20%2F%E8%8E%B7%E5%8F%96Let-s-Encrypt%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[本文介绍如何使用Let’s Encrypt获取免费证书，以支持https服务。 步骤如下:1. 拉取git上的工具123# git clonehttps://github.com/letsencrypt/letsencrypt# cd letsencrypt# chmod +x letsencrypt-auto 2. 获取证书123456789# ./letsencrypt-auto certonly --email 邮箱 -d 域名遇到How would you like to authenticate with the ACME CA?-------------------------------------------------------------------------------1: Spin up a temporary webserver (standalone)2: Place files in webroot directory (webroot)选择1 3. 更新证书(证书有效期3个月)1./letsencrypt-auto renew 可以配置crontab 定期更新 4. 配置nginx证书位置: /etc/letsencrypt/live/域名/123456789101112131415161718192021# HTTPS server#server &#123; listen 443 ssl; server_name 域名; ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / &#123; root html; index index.html index.htm; &#125;&#125;]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lua-resty-mysql事务封装]]></title>
    <url>%2F2016%2F10%2F22%2Flua-resty-mysql%E4%BA%8B%E5%8A%A1%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[lua-resty-mysql没有提供事务封装，下面提供一个事务的封装例子的主要代码部分。事务是基于session，主要将事务相关语句在同一个session上执行。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139local mysql = require "resty.mysql"local config = require "config"local log = require "utils.log"local cjson = require "cjson"local u_string = require "utils.string"local _M = &#123;&#125;local mt = &#123;__index = _M&#125;function _M.new(self) local db, err = mysql:new() if not db then log.err("failed to instantiate mysql: ", err) return nil end -- 连接超时时间 db:set_timeout(config.get('mysql_conn_timeout')) -- 连接数据库 local ok, err, errno, sqlstate = db:connect(config.get('mysql_conn')) if not ok then log.err("failed to connect: ", err, ": ", errno, ": ", sqlstate) return nil end return setmetatable(&#123; db = db &#125;, mt)end-- 开启事务function _M.transaction_start(self) local db = self.db local res, err, errno, sqlstate = db:query("START TRANSACTION") if not res then log.err("START TRANSACTION failed: ", err, ": ", errno, ": ", sqlstate) return nil end return trueend-- 提交事务function _M.transaction_commit(self) local db = self.db local res, err, errno, sqlstate = db:query("COMMIT") if not res then log.err("COMMIT failed: ", err, ": ", errno, ": ", sqlstate) return nil end -- 连接池 local pool = config.get('mysql_pool') local ok, err = db:set_keepalive(pool.timeout, pool.size) if not ok then log.err("failed to set keepalive: " .. err) end return trueend-- 回滚事务function _M.transaction_rollback(self) local db = self.db local res, err, errno, sqlstate = db:query("ROLLBACK") if not res then log.err("ROLLBACK failed: ", err, ": ", errno, ": ", sqlstate) return nil end -- 连接池 local pool = config.get('mysql_pool') local ok, err = db:set_keepalive(pool.timeout, pool.size) if not ok then log.err("failed to set keepalive: " .. err) end return trueend-- 执行sqlfunction _M.execute(self, sql, params) local sql = u_string.parse_sql(sql, params) if not sql then log.err("sql format error: ", sql, ": ", cjson.encode(params)) return nil end local db = self.db local res, err, errno, sqlstate = db:query(sql) if not res then log.err("sql execute failed: ", err, ": ", errno, ": ", sqlstate) return nil, errno end return resendfunction _M.select(self, sql, params) return self:execute(sql, params)endfunction _M.insert(self, sql, params) local res, errno = self:execute(sql, params) if res and res.affected_rows &gt; 0 then return true else return false, errno endendfunction _M.update(self, sql, params) local res, errno = self:execute(sql, params) if res and res.affected_rows &gt; 0 then return true else return false, errno endendfunction _M.delete(self, sql, params) local res, errno = self:execute(sql, params) if res and res.affected_rows &gt; 0 then return true else return false, errno endendreturn _M sql格式化代码：1234567891011121314151617181920-- sql 格式化function _M.parse_sql(sql, params) if not params or not u_table.is_array(params) or #params == 0 then return sql end if not sql then return nil end local new_params = &#123;&#125; for _, v in ipairs(params) do if type(v) == 'string' then tab_insert(new_params, ngx_quote_sql_str(v)) else tab_insert(new_params, v) end end sql = str_format(sql, unpack(new_params)) return sqlend]]></content>
      <categories>
        <category>OpenResty</category>
      </categories>
      <tags>
        <tag>OpenResty lua-resty-mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenResty之AccessLog记录response]]></title>
    <url>%2F2016%2F10%2F14%2FOpenResty%E4%B9%8Baccesslog%E4%BF%AE%E6%94%B9%2F</url>
    <content type="text"><![CDATA[Nginx的access log是在请求处理完成才写入日志文件的，下面将使用OpenResty将response加入到access log里面。123456789101112131415161718192021222324http &#123; log_format log_req_resp '$remote_addr - $remote_user [$time_local] ' '"$request" $status $body_bytes_sent ' '"$http_referer" "$http_user_agent" $request_time req_body:"$request_body" resp_body:"$resp_body"'; server &#123; listen 80; server_name localhost; access_log /tmp/nginx.resp.access.log log_req_resp; lua_need_request_body on; set $resp_body ""; # set resp_body 为空 location / &#123; body_filter_by_lua_block &#123; local resp_body = ngx.arg[1] ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body if ngx.arg[2] then # 判断是否是结尾 ngx.var.resp_body = ngx.ctx.buffered end &#125; proxy_pass http://xxx.xxx.xxx.xxx/; &#125; &#125;&#125; access log中文会被escape，可以对源码做修改来正常显示中文:123456789101112131415161718192021222324252627//ngx_http_log_module.cstatic u_char *ngx_http_log_variable(ngx_http_request_t *r, u_char *buf, ngx_http_log_op_t *op)&#123; ngx_http_log_loc_conf_t *lcf; ngx_http_variable_value_t *value; value = ngx_http_get_indexed_variable(r, op-&gt;data); if (value == NULL || value-&gt;not_found) &#123; *buf = '-'; return buf + 1; &#125; return ngx_cpymem(buf, value-&gt;data, value-&gt;len);// 注释下面代码#if 0 if (value-&gt;escape == 0) &#123; return ngx_cpymem(buf, value-&gt;data, value-&gt;len); &#125; else &#123; lcf = ngx_http_get_module_loc_conf(r, ngx_http_log_module); return (u_char *) ngx_http_log_escape(lcf, buf, value-&gt;data, value-&gt;len); &#125;#endif&#125;]]></content>
      <categories>
        <category>OpenResty</category>
      </categories>
      <tags>
        <tag>OpenResty accesslog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenResty之cosocket]]></title>
    <url>%2F2016%2F10%2F09%2FOpenResty%E4%B9%8Bcosocket%2F</url>
    <content type="text"><![CDATA[cosocket是OpenResty世界中很重要的一个技术，cosocket是依赖Lua协程 + Nginx事件通知两个重要特性拼的。Lua脚本运行在独享的协程之上，可以在需要的时候暂停自己(yield)，在条件满足的时候被唤醒(resume)。网络操作时，暂停自己，把网络事件注册到Nginx监听列表中，把cpu让出，运行权限交给Nginx。当有Nginx注册网络事件达到触发条件时，唤醒对应的协程继续处理。 大量的模块都是基于cosocket，例如: lua-resty-mysql lua-resty-redis lua-resty-websocket lua-resty-http ngx_stream_lua_module …… ngx.socket.tcp的一个例子123456789101112131415161718192021222324-- serverstream &#123; server &#123; listen 1234; content_by_lua_block &#123; local sock, err = ngx.req.socket() if not sock then ngx.exit(500) end while true do local data data, err = sock:receive('*l') if not data then return ngx.exit(200) end local sent sent, err = sock:send(data .. '\n') if err then return ngx.exit(200) end end &#125; &#125;&#125; 1234567891011121314151617181920-- clientlocal sock = ngx.socket.tcp()local ok, err = sock:connect("127.0.0.1", 1234)if not ok then ngx.say("failed to connect: ", err) return endlocal req_data = "hello world\r\n"local bytes, err = sock:send(req_data)if err then ngx.say("failed to send: ", err) return endlocal data, err, partial = sock:receive('*l')if err then ngx.say("failed to recieve: ", err) return endsock:close() ngx.say("response first line: ", data)]]></content>
      <categories>
        <category>OpenResty</category>
      </categories>
      <tags>
        <tag>OpenResty cosocket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenResty入门]]></title>
    <url>%2F2016%2F09%2F28%2FOpenResty%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[OpenResty介绍 Nginx的非阻塞网络模型，高并发、高性能 Lua脚本语言的灵活、小巧、高效 Lua协程与Nginx非阻塞网络模型融合，以同步的方式写非阻塞代码 OpenResty生态日趋完善，大量应用在高并发场景下，大量优秀的模块 参考 https://openresty.org/en/download.html http://nginx.org/en/docs/ http://luajit.org/index.html http://www.lua.org/manual/5.1/ https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details(最佳实践) https://github.com/openresty/lua-nginx-module https://github.com/Iresty/nginx-lua-module-zh-wiki(上一官方文档中文翻译) https://github.com/bungle/awesome-resty(相关资源整理汇总) 安装配置命令(ubuntu)安装步骤 依赖安装 1sudo apt-get install libreadline-dev libncurses5-dev libpcre3-dev ibssl-dev perl make build-essential 源码解压 1tar zxvf openresty-version.tar.gz &amp;&amp; cd openresty-version/ configure 1./configure --prefix=/opt/openresty --with-luajit --withhttp_iconv_module -j2 编译 1make -j2 安装 1sudo make install 命令12345678910./configure --help # 查看安装配置参数nginx # 启动nginx -p /opt/openresty/nginx # 指定启动prefix路径nginx -c /opt/openresty/nginx/conf/nginx.conf # 指定启动配置文件nginx -t # 检查nginx.conf配置文件里的配置项合法否nginx -V # 查看版本及编译进去的模块nginx -s stop # 强制退出nginx -s quit # 优雅退出nginx -s reload # 重新加载配置文件 优雅重启nginx -s reopen # 重新打开日志文件, 用于切换日志 配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485user resty; # worker进程运行用户 涉及到权限worker_processes auto; # worker进程数为cpu核数worker_cpu_affinity auto; # worker进程cpu亲和性error_log logs/error.log; # 日志pid logs/nginx.pid; # master进程ID 用户nginx -s quit等命令worker_rlimit_nofile 65535; # 绕过系统单进程最大文件句柄打开数events &#123; use epoll; # epoll网络模型 worker_connections 65535; # worker单进程最大连接数 multi_accept on; # 惊群&#125;http &#123; include mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"'; # access_log格式 access_log logs/access.log main; # access_log格式 sendfile on; tcp_nopush on; tcp_nodelay on; #keepalive_timeout 0; keepalive_timeout 65; # http长连接 keepalive_disable none; # 不再通过 User-Agent 中的浏览器信息，来决定是否 keepalive # 压缩 gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_http_version 1.0; gzip_comp_level 4; gzip_types text/plain application/x-javascript text/css application/xml; gzip_vary on; server &#123; listen 80; server_name coder-zhuyu.info; charset utf8; #access_log logs/host.access.log main; root html/blog; location / &#123; # root html; index index.html index.htm; &#125; # 缓存文件 location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|mp3)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 30d; &#125; location ~ .*\.(svg)$ &#123; root html; expires 30d; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125;stream &#123; # TCP UDP&#125; hello world12345location /helloworld &#123; content_by_lua_block &#123; ngx.say("Hello, World!") &#125;&#125; 技能图谱]]></content>
      <categories>
        <category>OpenResty</category>
      </categories>
      <tags>
        <tag>OpenResty Nginx</tag>
      </tags>
  </entry>
</search>